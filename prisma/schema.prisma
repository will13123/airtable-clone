generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bases         Base[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Base {
  id            String    @id @default(cuid())
  userId        String
  name          String
  tables        Table[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Table {
  id            String    @id @default(cuid())
  baseId        String
  name          String
  columns       Column[]
  rows          Row[]
  cells         Cell[]
  views         View[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  base          Base      @relation(fields: [baseId], references: [id], onDelete: Cascade)

  @@index([baseId])
}

model Row {
  id            String    @id @default(cuid())
  tableId       String
  cells         Cell[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  table         Table     @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@index([tableId])
}

model Column {
  id            String    @id @default(cuid())
  tableId       String
  type          String    @default("text") // "text" or "number"
  order         Int       @default(0)
  cells         Cell[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  table         Table     @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@index([tableId])
  @@index([order])
}

model Cell {
  id            String    @id @default(cuid())
  tableId       String
  columnId      String    // Custom col identifier
  rowId         String    // Custom row identifier
  value         String?   // Store as text, cast to number if type is "number"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  table         Table     @relation(fields: [tableId], references: [id], onDelete: Cascade)
  column        Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  row           Row       @relation(fields: [rowId], references: [id], onDelete: Cascade)

  @@index([tableId])
  @@index([columnId])
  @@index([rowId])
}

model View {
  id            String    @id @default(cuid())
  tableId       String
  name          String
  filters       Json      // { columnId: string, operator: string, value: string }[]
  sort          Json      // { columnId: string, direction: "asc" | "desc" }[]
  visibleColumns String[] @default([]) // Array of column IDs to show
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  table         Table     @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@index([tableId])
}

